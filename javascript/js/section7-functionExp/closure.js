// 闭包：　有权访问其他函数作用域中变量的　函数
/*在创建函数的时候会创建一个预先包含全变量对象的作用域连，被保存在内部的[[scope]]中，
在调用函数的时候，会创建一个执行环境，然后复制函数在　[[scope]] 中的对象构建器执行
环境的作用域连，然后又有一个活动对象被创建病推入执行环境作用域连的前端*/


// 作用域连的实质：　指向变量对象的指针列表，只引用不包含变量对象

//  闭包占用内存比较多，除非必要，还是要谨慎使用

// 闭包保存到是整个变量对象，不是特殊值

// 通过在外层包一个z自执行的函数表达式，然后将想要保存的实时数据以参数的形式传递才行，值传递的话值传递可一个副本
for(var i = 0;i < 10 ;i ++){
    (function(i){
        return function(){
            return i ;
        }
    })(i);
}


//this 指向当前函数的运行环境，匿名函数的执行性有全局性，所以总是指向ｗｉｎｄｏｗ，想要访问外层的this 和ａｒｇｕｍｅｎｔ
// 的话，需要把他们赋值给其他的变量，用这些变量访问

// 内存泄露
// 　ｉｅ中闭包保存一个ｈｔｍｌ元素这个元素就不会销毁，正确的用法

function assignHandler(){
    var element = document.getElementById("someElement");
    var id = element.id;
    element.onclock = function(){
        alert(id);
    }
    element = null;//即使没有直接引用也会保存整个环境对象的，所以需要
}